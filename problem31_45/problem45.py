'''
Triangle, pentagonal, and hexagonal numbers are generated by the following formulae:

Triangle         Tn=n(n+1)/2            1, 3, 6, 10, 15, ...
Pentagonal       Pn=n(3n-1)/2           1, 5, 12, 22, 35, ...
Hexagonal        Hn=n(2n-1)             1, 6, 15, 28, 45, ...
It can be verified that T285 = P165 = H143 = 40755.

Find the next triangle number that is also pentagonal and hexagonal.
'''
import time

def triangle_num(n):
    '''return the ith triangle number'''
    return n*(n+1)/2

def pentagon_num(i):
    '''return the ith pentagonal number'''
    return i * (3 * i - 1) / 2

def hexagon_num(i):
    '''return the ith hexagonal number'''
    return i * (2 * i - 1)

def is_pentagon(i):
    n = i + 1.0/72

'''Bad method, took more than a minute'''
def main():
    timestart = time.time()
    '''This define the lagest number the programm can find'''
    bound = 150000
    
    '''Initialize 3 list'''
    triangle = []
    for i in range(286, bound):
        triangle.append(triangle_num(i))
        
    pentagon = []    
    for i in range(165, int(bound/1.7)):
        pentagon.append(pentagon_num(i))  
        
    hexagon = []
    for i in range(1, int(bound/2 + 1)):
        hexagon.append(hexagon_num(i))
    print(hexagon.index(1533776805))
        
    print(len(triangle), len(pentagon), len(hexagon))
    print(triangle[-1], pentagon[-1], hexagon[-1])
    
    '''Go through all triangle number until matched'''
    for i in triangle:
        if i in hexagon:
            if i in pentagon:
                print('Done!  Answser:', i)
                print('Time took:', time.time() - timestart)
                return 1
    
    print('Answer did not found, try increase bound')
    
    
'''Refined method'''
'''
It's easy to prove that all hexagonal number is triangle number.
Hn=n(2n-1)    Tn=n(n+1)/2
The limit as n goes to infinite of the derivative of Hn/Tn is 2. Which means every second triangle number
is a hexagonal number, Tn = H(n-1/2) 
Thus, from the profe above, we only need to check Pn with Hn.
'''
def main1():
    timestart = time.time()
    
    bound = 1500
    
    pentagon = []    
    for i in range(166, int(bound/1.7)):
        pentagon.append(pentagon_num(i))  
    
    hexagon = []      
    for i in range(143, int(bound/2 + 1)):
        hexagon.append(hexagon_num(i))
        
    for i in hexagon:
        if i in pentagon:
            print('Done!  Answser:', i)
            print('Time took:', time.time() - timestart)
            return 1

'''
Mathematical method
since prove above that all hexagonal number is triangle number, so the triangle number is also ignored here
The answer exist when Hn = Pm which 
    n(2n-1) = m(3m-1)/2
    4(n - 1/4)^2 = 3(m - 1/6)^2 + 1/6
Simply find the solution of the equation above, and substitude back n to get the triangle number
this method required some math, and it's more like a cheat
but it works very fast
'''
import math
        
def main2():
    timestart = time.time()
    for n in range(200, 200000):   
        m = math.sqrt(((4.0* (n - 0.25)**2) - (1.0/6.0)) / 3.0) + (1.0/6.0)
        if m % 1.0 == 0 and pentagon_num(m) % 1.0 == 0:
            print('Done!  Answser:', hexagon_num(n))
            print('Time took:',time.time() - timestart,'ms')
            return 1
        
if __name__ == '__main__':
    main2()
