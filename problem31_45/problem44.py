'''
Pentagon numbers

Problem 44
Pentagonal numbers are generated by the formula, Pn=n(3n-1)/2. The first ten pentagonal numbers are:

1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...

It can be seen that P4 + P7 = 22 + 70 = 92 = P8. However, their difference, 70 - 22 = 48, is not pentagonal.

Find the pair of pentagonal numbers, Pj and Pk, for which their sum and difference are pentagonal and D = |Pk - Pj| is minimised; what is the value of D?
'''
'''
I cannot identify the upper bound for this problem, thus, I set the bound to a variable
until the answer was found, after several trial the bound is around 2500.

the solution to to enumerate Pj and Pk until it matched, then output the smallest number
'''

def pentagon_num(i):
        '''return the ith pentagonal number'''
        return i * (3 * i - 1) / 2

def main():
    '''This variable set the upper bound'''
    bound = 2500
    
    '''
    Init two list, pentabool is boolean, used to check is a number is pentagonal number
    penta is a list of pentagonal number, used to calculate sum and difference
    '''
    pentabool = [False]*pentagon_num(bound*2)
    penta = []
    for i in range(1, bound*2):
        pentabool[pentagon_num(i)] = [True]
        penta.append(pentagon_num(i))
    
    '''initialize a min to compare'''
    min = 1000000000
    
    '''Enumerate Pj and Pk below bound'''
    for i in range(bound):
        for k in range(i+1, bound):
            d = penta[k] - penta[i]
            if pentabool[d]:
                if pentabool[penta[k] + penta[i]]:
                    if d < min:
                        min = d
    
    print(min)
    
if __name__ == '__main__':
    main()
